import gspread
from oauth2client.service_account import ServiceAccountCredentials
from typing import List, Dict
from pprint import pprint

# ========================
# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞
# ========================
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
CREDENTIALS_FILE = "credentials.json"
SPREADSHEET_NAME = "–ê–±—Ä–∞–º—á–µ–Ω–∫–æ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä. –î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"  # –Ω–∞–∑–≤–∞–Ω–∏–µ Google –¢–∞–±–ª–∏—Ü—ã
WORKSHEET_NAME = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"    # –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–≤–∫–ª–∞–¥–∫–∏)

# ========================
# üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
# ========================
def connect_to_sheet():
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open(SPREADSHEET_NAME).worksheet(WORKSHEET_NAME)
    return sheet


# ========================
# üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Å–∞–º–∞—è –≤–µ—Ä—Ö–Ω—è—è)
# ========================
def get_latest_workout() -> Dict:
    sheet = connect_to_sheet()
    data = sheet.get_all_values()

    latest_workout = {}
    current_index = 0

    # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    for i, row in enumerate(data):
        if row and row[0].strip().lower().startswith("–¥–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"):
            current_index = i
            break

    # –°—á–∏—Ç–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–≤–æ–π –∑–Ω–∞—á–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
    for row in data[current_index + 3:]:
        if row[0].strip().lower().startswith("–¥–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"):
            break
        elif not row[0]:
            break
        else:
            latest_workout[row[0]] = row[1:]

    return latest_workout


# ========================
# üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
# ========================
def format_workout_readable(workout: Dict) -> str:
    lines = ["üí™ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ **", ""]

    for i, ex in enumerate(list(workout.keys())):
        
        name = ex.strip()
        exercise_reps_count = workout[ex][0].strip()

        last_best_weight = workout[ex][1].strip()
        last_best_reps = workout[ex][2].strip()
        last_best_rpe = workout[ex][3].strip()

        warmups = workout[ex][4].strip()
        burnout_count = workout[ex][5].strip()  # —á–∏—Å–ª–æ –¥–æ–±–∏–≤–æ—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
        work_weight = workout[ex][6].strip()
        work_reps = workout[ex][7].strip()
        work_rpe = workout[ex][8].strip()
        lines.append(f"**{i+1}. {name}**")

        if last_best_weight:
            lines.append(f"  ‚îî –ü—Ä–µ–¥. –ª—É—á—à–∏–π —Å–µ—Ç: {last_best_weight} –∫–≥ √ó {last_best_reps} –ø–æ–≤—Ç., RPE {last_best_rpe}")

        if warmups:
            warmup_sets = [w.strip().replace("*", "√ó") for w in warmups.split(";")]
            lines.append(f"  ‚îî –†–∞–∑–º–∏–Ω–∫–∞: {', '.join(warmup_sets)}")

        if work_weight:
            lines.append(f"  ‚îî –†–∞–±–æ—á–∏–π –≤–µ—Å: {work_weight} –∫–≥")

        if work_reps:
            lines.append(f"  ‚îî –ü–æ–≤—Ç–æ—Ä—ã: {work_reps}")

        if burnout_count:
            try:
                n_sets = int(burnout_count)
                lines.append(f"  ‚îî –û—Ç–¥—ã—Ö-–ø–∞—É–∑–∞: {n_sets}")
            except ValueError:
                pass

        lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏

    return "\n".join(lines)


# ========================
# üß™ –û—Ç–ª–∞–¥–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª
# ========================
if __name__ == "__main__":
    workout = get_latest_workout()
    formatted = format_workout_readable(workout)
    print(formatted)